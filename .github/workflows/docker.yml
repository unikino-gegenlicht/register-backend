name: docker

on:
    workflow_dispatch:
    push:
        paths:
            - '**/go.*'
            - '**.go'
            - Dockerfile
        branches:
            - '**'
        tags:
            - 'v*.*.*'

env:
    image-name: ghcr.io/unikino-gegenlicht/register/backend

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                platform:
                    - linux/amd64
                    - linux/arm64
                    - linux/arm/v7
                    - linux/arm/v6

        steps:
        
          - run: |
              platform=${{ matrix.platform }}
              echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

          - uses: actions/checkout@v4

          - uses: docker/setup-qemu-action@v3

          - uses: docker/setup-buildx-action@v3

          - uses: docker/login-action@v3
            with:
              registry: ghcr.io
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}

          - uses: docker/metadata-action@v5
            id: metadata
            with:
                images: ${{ env.image-name }}
                labels:
                    org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
                    org.opencontainers.image.revision=${{ github.sha }}
                    org.opencontainers.image.licenses=EUPL-1.2

          - uses: actions/cache@v4
            with:
                path: go-build-cache
                key: ${{ env.PLATFORM_PAIR }}-go-build-cache-${{ hashFiles('**/go.sum') }}

          - uses: reproducible-containers/buildkit-cache-dance@v2
            with:
                cache-source: go-build-cache

          - id: build
            uses: docker/build-push-action@v6
            with:
                context: .
                push: ${{ github.event_name != 'pull_request' }}
                labels: ${{ steps.metadata.outputs.labels }}
                cache-from: type=gha
                cache-to: type=gha,mode=max
                platforms: ${{ matrix.platform }}
                provenance: false
                sbom: false
                outputs: type=image,name=${{ env.image-name }},push-by-digest=true,name-canonical=true,push=true

          - name: Export digest
            shell: bash
            run: |
                echo "creating digest for ${{ matrix.platform }}"
                mkdir -p /tmp/digests/
                digest="${{ steps.build.outputs.digest }}"
                touch "/tmp/digests/${digest#sha256:}"
              
          - name: Upload digest
            uses: actions/upload-artifact@v4
            with:
                name: digests-${{ env.PLATFORM_PAIR }}
                path: /tmp/digests/*
                if-no-files-found: error
                retention-days: 1

    merge:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/download-artifact@v4
              with:
                path: /tmp/digests
                pattern: digests-*
                merge-multiple: true

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              
            - uses: docker/metadata-action@v5
              id: meta
              with:
                images: ${{ env.image-name }}
                tags: |
                  type=raw,value=latest,enable={{is_default_branch}},priority=3000
                  type=ref,event=tag,priority=2500
                  type=ref,event=branch,priority=2000
                  type=sha,prefix=,priority=1000
                
            - uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
                
            - working-directory: /tmp/digests
              shell: bash
              run: |
                docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
                  $(printf '${{ env.image-name }}@sha256:%s ' *)   
              
            - shell: bash
              run: |
                  docker buildx imagetools inspect ${{env.image-name}}:${{ steps.meta.outputs.version }} 